# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import request_pb2 as request__pb2


class FastChainStub(object):
  """Interface exposed by pbft committee nodes
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.NewTxnRequest = channel.unary_unary(
        '/fastchain.FastChain/NewTxnRequest',
        request_serializer=request__pb2.Transaction.SerializeToString,
        response_deserializer=request__pb2.GenericResp.FromString,
        )
    self.Check = channel.unary_unary(
        '/fastchain.FastChain/Check',
        request_serializer=request__pb2.Request.SerializeToString,
        response_deserializer=request__pb2.GenericResp.FromString,
        )
    self.Send = channel.unary_unary(
        '/fastchain.FastChain/Send',
        request_serializer=request__pb2.Request.SerializeToString,
        response_deserializer=request__pb2.GenericResp.FromString,
        )


class FastChainServicer(object):
  """Interface exposed by pbft committee nodes
  """

  def NewTxnRequest(self, request, context):
    """Send new transaction to presumed leader node
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Check(self, request, context):
    """rpc BroadcastByGRPC (Request) returns (GenericResp) {}
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Send(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FastChainServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'NewTxnRequest': grpc.unary_unary_rpc_method_handler(
          servicer.NewTxnRequest,
          request_deserializer=request__pb2.Transaction.FromString,
          response_serializer=request__pb2.GenericResp.SerializeToString,
      ),
      'Check': grpc.unary_unary_rpc_method_handler(
          servicer.Check,
          request_deserializer=request__pb2.Request.FromString,
          response_serializer=request__pb2.GenericResp.SerializeToString,
      ),
      'Send': grpc.unary_unary_rpc_method_handler(
          servicer.Send,
          request_deserializer=request__pb2.Request.FromString,
          response_serializer=request__pb2.GenericResp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'fastchain.FastChain', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ClientReceiverStub(object):
  """//Interface exposed by client
  service Client {
  //RPC service that responds whether the node is the leader
  // rpc CheckLeader (CheckLeaderReq) returns (CheckLeaderResp) {}

  //Send new transaction to presumed leader node
  rpc NewTxnRequest (Transaction) returns (GenericResp) {}
  }

  RPC service that responds whether the node is the leader
  rpc CheckLeader (CheckLeaderReq) returns (CheckLeaderResp) {}
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PbftReplyReceiver = channel.unary_unary(
        '/fastchain.ClientReceiver/PbftReplyReceiver',
        request_serializer=request__pb2.TruePbftBlock.SerializeToString,
        response_deserializer=request__pb2.Empty.FromString,
        )
    self.Check = channel.unary_unary(
        '/fastchain.ClientReceiver/Check',
        request_serializer=request__pb2.GenericResp.SerializeToString,
        response_deserializer=request__pb2.GenericResp.FromString,
        )


class ClientReceiverServicer(object):
  """//Interface exposed by client
  service Client {
  //RPC service that responds whether the node is the leader
  // rpc CheckLeader (CheckLeaderReq) returns (CheckLeaderResp) {}

  //Send new transaction to presumed leader node
  rpc NewTxnRequest (Transaction) returns (GenericResp) {}
  }

  RPC service that responds whether the node is the leader
  rpc CheckLeader (CheckLeaderReq) returns (CheckLeaderResp) {}
  """

  def PbftReplyReceiver(self, request, context):
    """Send new transaction to presumed leader node
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Check(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ClientReceiverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PbftReplyReceiver': grpc.unary_unary_rpc_method_handler(
          servicer.PbftReplyReceiver,
          request_deserializer=request__pb2.TruePbftBlock.FromString,
          response_serializer=request__pb2.Empty.SerializeToString,
      ),
      'Check': grpc.unary_unary_rpc_method_handler(
          servicer.Check,
          request_deserializer=request__pb2.GenericResp.FromString,
          response_serializer=request__pb2.GenericResp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'fastchain.ClientReceiver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
